#------------------------------------------------------------------
#      ___           ___       ___                       ___     
#     /\  \         /\__\     /\  \          ___        /\__\    
#    /::\  \       /:/  /    /::\  \        /\  \      /:/  /    
#   /:/\ \  \     /:/  /    /:/\:\  \       \:\  \    /:/__/     
#  _\:\~\ \  \   /:/  /    /::\~\:\  \      /::\__\  /::\__\____ 
# /\ \:\ \ \__\ /:/__/    /:/\:\ \:\__\  __/:/\/__/ /:/\:::::\__\
# \:\ \:\ \/__/ \:\  \    \/__\:\/:/  / /\/:/  /    \/_|:|~~|~   
#  \:\ \:\__\    \:\  \        \::/  /  \::/__/        |:|  |    
#   \:\/:/  /     \:\  \       /:/  /    \:\__\        |:|  |    
#    \::/  /       \:\__\     /:/  /      \/__/        |:|  |    
#     \/__/         \/__/     \/__/                     \|__|   
#------------------------------------------------------------------ 
# meta developer: @Hicota
# translator: @jpshiro

import random
import datetime
import aiohttp
import re

from telethon.tl.types import PeerUser
from .. import loader, utils

class DBWedding():
    def __init__(self, base_url: str = "http://89.22.225.69:3400"):
        self.base_url = base_url
        self.session = aiohttp.ClientSession()

    async def __aenter__(self):
        return self

    async def __aexit__(self, *exc):
        await self.session.close()

    async def _make_request(self, method: str, endpoint: str, **kwargs):
        url = f"{self.base_url}{endpoint}"
        if kwargs.get('headers', {'X-API-KEY': True})['X-API-KEY'] is None:
            raise Exception(f"API error: API key don't support NoneType, change key in module config")
        async with self.session.request(method, url, **kwargs) as response:
            if response.status != 200:
                rjson = await response.json()
                raise Exception(f"API error: {response.status} {rjson['detail']}")
            return await response.json()
        
    async def get_apikey2(self, user_id: int) -> str:
        endpoint = f"/api/get/user2"
        params = {'tgid': user_id}
        return await self._make_request("GET", endpoint, params=params)
    
    async def user_exists(self, api_key: str, user_id: int) -> bool:
        endpoint = f"/api/{user_id}/exists"
        headers = {"X-API-KEY": api_key}
        return await self._make_request("GET", endpoint, headers=headers)
    
    async def add_users(self, api_key: str, u1: int, u2: int, days: int, month: int, year: int):
        endpoint = "/api/addusers"
        headers = {"X-API-KEY": api_key}
        params = {"id": u1, "id2": u2, "days": days, "month": month, "year": year}
        return await self._make_request("POST", endpoint, headers=headers, params=params)
    
    async def get_user_info(self, api_key: str):
        endpoint = "/api/users/get"
        headers = {"X-API-KEY": api_key}
        return await self._make_request("GET", endpoint, headers=headers)
    
    async def delete_user(self, api_key: str):
        endpoint = "/api/deluser"
        headers = {"X-API-KEY": api_key}
        return await self._make_request("DELETE", endpoint, headers=headers)

@loader.tds
class Wedding(loader.Module):
    """–ñ–∏–≤–∏—Ç–µ —Å—á–∞—Å—Ç–ª–∏–≤–æ —Å–æ —Å–≤–æ–µ–π –ø–æ–ª–æ–≤–∏–Ω–∫–æ–π"""

    strings = {
        "name": "Wedding",
        "call_marriage": "Custom template for wedding information\nArguments: {yname} {hname} {year} {month} {day} {days}",
        "return": {
            "yes": {
                1: "Yes, I sure",
                2: "Agree"
            },
            "no": {
                1: "No, guess I refuse",
                2: "Refuse"
            },
        },
        "decide_for": "Why do you decide for you soulmate?",
        "marry_not_you": "Someone is decided to marry but not you, come to terms with it",
        "now_married": "Congratulate, now you are married with {}",
        "refused": "Alas but {} is refused {}, maybe better luck next time üò¢",
        "filed_to_divorce": "{}, your soulmate is filed to divorce üò¢",
        "not_dare": "I knew that you wouldn't dare, that's right",
        "decided_marry": "{}, {} held a ring to you, perhaps he's want to marry youü•∞",
        "marry_yourself": "‚Ä¢ <b>You can't marry yourself</b>",
        "marry_bot": "‚Ä¢ <b>Don't try to marry a bot</b>",
        "not_found": "‚Ä¢ <b>and who are you looking for?</b>",
        "no_args": "‚Ä¢ <b>Hmm, I guess that more correct is {}</b>",
        "cheat_on": "‚Ä¢ <b>It's a pity that you want to silently cheat on {}</b>",
        "sure_divorce": "Are you sure you want to divorce with {}?\nMaybe it's not worth it?",
        "no_soulmate": "‚Ä¢ <b>But you don't have a soulmate</b>",
        "idk": "‚Ä¢ <b>It's a pity you can't get married if the user has a soulmate</b>",
        "married": "‚Ä¢ marriage between {} and {}\n‚Ä¢ <b>Marriage date registration:</b> {} {} {} year\n‚Ä¢ <b>Marriage duration:</b> {} days",
        "love": "‚Ä¢ <b>Should not to use rp commands on others, works only with your soulmate</b>",
        "rplist": {
            "kiss": "<b>üíã | {} kissed {} on the cheek</b>",
            "gift": "<b>üéÅ | {} gave a gift {} to {}</b>", 
            "hug": "<b>üëê | {} hugged {}</b>",
            "fuck": "<b>üöª | {} fucked {}</b>",
            "compliment": "<b>ü§≠ | {} told {} a cute compliment</b>",
            "stroke": "<b>üëã | {} stroked {} on head</b>",
            "breakfast": "<b>ü•° | {} cooked a breakfast</b>",
            "bit": "<b>üßõ | {} bit {}</b>",
            "lick": "<b>üëÖ | {} licked {}</b>",
            "push": "<b>üè† | {} pushed {} against a wall</b>",
            "gave": "<b>‚ù§‚Äçüî• | {} gave himself to {}</b>"
        },
        "rplol": ['teddy', 'phone', 'watch', 'chocolate', 'car', 'pc', 'annual subscription to lavhost<emoji document_id=5192756799647785066>‚úåÔ∏è</emoji><emoji document_id=5193117564015747203>‚úåÔ∏è</emoji><emoji document_id=5195050806105087456>‚úåÔ∏è</emoji><emoji document_id=5195457642587233944>‚úåÔ∏è</emoji>'],
        "api_key": 'Key to make module work, you can get it by writing command /apikey to bot @Hicot–æchkaBot',
        "api_error": 'Oops.. error occurred ‚û° <code>{}</code>',
        "rphelp": '‚Üì Mini list of RP-commands ‚Üì\n\n'
    }

    strings_ru = {
        "call_marriage": "–ö–∞—Å—Ç–æ–º–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±—Ä–∞–∫–∞\n–ê—Ä–≥—É–º–µ–Ω—Ç—ã: {yname} {hname} {year} {month} {day} {days}",
        "return": {
            "yes": {
                1: "–î–∞, —è —É–≤–µ—Ä–µ–Ω",
                2: "–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è"
            },
            "no": {
                1: "–ù–µ—Ç, –ø–æ–∂–∞–ª—É–π –æ—Ç–∫–∞–∂—É—Å—å",
                2: "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è"
            }
        },
        "decide_for": "–ó–∞—á–µ–º —Ç—ã —Ä–µ—à–∞–µ—à—å –∑–∞ —Å–≤–æ—é –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω–∫—É?",
        "marry_not_you": "–ù–µ —Å –≤–∞–º–∏ —Ä–µ—à–∏–ª–∏ –∑–∞–≤–µ—Å—Ç–∏ –±—Ä–∞–∫, —Å–º–∏—Ä–∏—Ç–µ—Å—å",
        "now_married": "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã —Ç–µ–ø–µ—Ä—å —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –±—Ä–∞–∫–µ –≤–º–µ—Å—Ç–µ —Å {}",
        "refused": "–£–≤—ã –Ω–æ {} –æ—Ç–∫–∞–∑–∞–ª {}, –º–æ–∂–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–≤–µ–∑—ë—Çüò¢",
        "filed_to_divorce": "{}, –≤–∞—à–∞ –ø–æ–ª–æ–≤–∏–Ω–∫–∞ –ø–æ–¥–∞–ª–∞ —Ä–∞–∑–≤–æ–¥ –Ω–∞ –≤–∞—Åüò¢",
        "not_dare": "–Ø –∑–Ω–∞–ª —á—Ç–æ –≤—ã –Ω–∞ —ç—Ç–æ –Ω–µ —Ä–µ—à–∏—Ç–µ—Å—å, –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ",
        "decided_marry":  "{}, {} –ø—Ä–æ—Ç—è–≥–∏–≤–∞–µ—Ç –∫–æ–ª–µ—á–∫–æ –∫ –≤–∞–º, –æ–Ω —Ö–æ—á–µ—Ç –±—ã—Ç—å —Å –≤–∞–º–∏ –¥–æ —Å—Ç–∞—Ä–æ—Å—Ç–∏, –≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã?",
        "marry_yourself": "‚Ä¢ <b>–ò–≥—Ä—ã —Å —Å–∞–º–æ–ª—é–±–æ–≤—å—é –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è</b>",
        "marry_bot": "‚Ä¢ <b>–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Å—Ç–∏ –±—Ä–∞–∫ —Å –±–æ—Ç–æ–º</b>",
        "not_found": "‚Ä¢ <b>–ê –≤—ã –∫–æ–≥–æ –∏—â–∏—Ç–µ —Ç–æ?</b>",
        "no_args": "‚Ä¢ <b>–•–º, –ø–æ—Ö–æ–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–µ–µ –±—É–¥–µ—Ç {}</b>",
        "cheat_on": "‚Ä¢ <b>–ñ–∞–ª—å –∫–æ–Ω–µ—á–Ω–æ —á—Ç–æ –≤—ã –≤—Ç–∏—Ö–æ—Ä—è —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–º–µ–Ω—è—Ç—å {}</b>",
        "sure_divorce": "–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–≤–µ—Å—Ç–∏—Ç—å —Å {}?\n–ú–æ–∂–µ—Ç –Ω–µ —Å—Ç–æ–∏—Ç?",
        "no_soulmate": "‚Ä¢ <b>–ù–æ —É –≤–∞—Å –≤–µ–¥—å –Ω–µ—Ç—É –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏</b>",
        "idk": "‚Ä¢ <b>–£–≤—ã –Ω–æ –Ω–µ–ª—å–∑—è –∑–∞–≤–µ—Å—Ç–∏ –±—Ä–∞–∫ –∫–æ–≥–¥–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –¥—Ä—É–≥–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞</b>",
        "married": "‚Ä¢ –ë—Ä–∞–∫ –º–µ–∂–¥—É {} –∏ {}\n‚Ä¢ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –±—Ä–∞–∫–∞:</b> {} {} {} year\n‚Ä¢ <b>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±—Ä–∞–∫–∞:</b> {} –¥–Ω–µ–π",
        "love": "‚Ä¢ <b>–†–ø –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–ø–ª–µ–µ –Ω–∞ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–µ –∏–ª–∏ –±–µ–∑ —Ä–µ–ø–ª–µ—è</b>",
        "rplist": {
            "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": "<b>üíã | {} –ø–æ—Ü–µ–ª–æ–≤–∞–ª/a –≤ —â—ë—á–∫—É {}</b>",
            "–ø–æ–¥–∞—Ä–æ–∫": "<b>üéÅ | {} –ø–æ–¥–∞—Ä–∏–ª/a {} {}</b>",
            "–æ–±–Ω—è—Ç—å": "<b>üëê | {} –æ–±–Ω—è–ª/a {}</b>",
            "—Ç—Ä–∞—Ö–Ω—É—Ç—å": "<b>üöª | {} —Ç—Ä–∞—Ö–Ω—É–ª {}</b>",
            "–∫–æ–º–ø–ª–∏–º–µ–Ω—Ç": "<b>ü§≠ | {} —Å–∫–∞–∑–∞–ª/–∞ –ª–∞—Å–∫–æ–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç {}</b>",
            "–ø–æ–≥–ª–∞–¥–∏—Ç—å": "<b>üëã | {} –ø–æ–≥–ª–∞–¥–∏–ª/–∞ –ø–æ –≥–æ–ª–æ–≤–µ {}</b>",
            "–∑–∞–≤—Ç—Ä–∞–∫": "<b>ü•° | {} –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª/–∞ –∑–∞–≤—Ç—Ä–∞–∫ {}</b>",
            "–∫—É—Å—å": "<b>üßõ | {} –∫—É—Å–Ω—É–ª/–∞ {}</b>",
            "–ª–∏–∑—å": "<b>üëÖ | {} –ª–∏–∑–Ω—É–ª/–∞ {}</b>",
            "–ø—Ä–∏–∂–∞–ª": "<b>üè† | {} –ø—Ä–∏–∂–∞–ª/–∞ –∫ —Å—Ç–µ–Ω–µ {}</b>",
            "–æ—Ç–¥–∞—Ç—å—Å—è": "<b>‚ù§‚Äçüî• | {} –æ—Ç–¥–∞–ª—Å—è/–∞—Å—å {}</b>"
        },
        "rplol": ['–º–∏—à–∫—É', '—Ç–µ–ª–µ—Ñ–æ–Ω', '—á–∞—Å—ã', '—à–æ–∫–æ–ª–∞–¥–∫—É', '–º–∞—à–∏–Ω—É', '–ø–∫', '–≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –ª—é–±–æ–π –∏–∑ —Ö–æ—Å—Ç–∏–Ω–≥–æ–≤, —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è –∏ —Ç–æ–ª—å–∫–æ —Å–µ–π—á–∞—Å, –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ —à–∞–Ω—ÅüòÅ'],
        "api_key": '–ö–ª—é—á —á—Ç–æ–±—ã –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–ª, –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞–≤ –±–æ—Ç—É @Hicot–æchkaBot –∫–æ–º–∞–Ω–¥—É /apikey',
        "api_error": '–£–ø—Å.. –í—ã–ª–µ—Ç–µ–ª–∞ –æ—à–∏–±–∫–∞ ‚û° <code>{}</code>',
        "rphelp": '‚Üì –ú–∏–Ω–∏ –ª–∏—Å—Ç —Ä–ø-–∫–æ–º–∞–Ω–¥ ‚Üì\n\n'
    }

    mrg = DBWedding()
    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "BlockWedlock",
                None,
                lambda: self.strings('call_marriage'),
                validator = loader.validators.String()
            ),
            loader.ConfigValue(
                "API-KEY",
                None, 
                lambda: self.strings("api_key"),
                validator = loader.validators.Hidden()
            )
        )

    async def on_dlmod(self):
        resp = (await self.mrg.get_apikey2((await self.client.get_me()).id))
        if not resp is None:
            self.config['API-KEY'] = resp
    
    async def client_ready(self):
        self.me = await self.client.get_me()


    def lenok(self, args, urluser):
        return [
            {
                "text": self.strings('return')['yes'][1], 
                "callback": self.yea, 
                "args": (args, urluser)
            },
            {
                "text": self.strings('return')['no'][1], 
                "callback": self.nothing
            }
        ]

    def choza(self, args, uid):
        return [
            {
                "text": self.strings('return')['yes'][2],
                "callback": self.yes,
                "args": (args, uid)
            },
            {
                "text": self.strings('return')['no'][2],
                "callback": self.no,
                "args": (args, uid)
            }
        ]    
    
    async def yes(self, call, args, uid):
        if call.from_user.id == self._tg_id:
            return await call.answer(self.strings('decide_for'))
        elif uid != call.from_user.id:
            return await call.answer(self.strings('marry_not_you'))
        daydt = datetime.date.today()
        resp = (await self.mrg.add_users(self.config['API-KEY'], self.me.id, uid, daydt.day, daydt.month, daydt.year))
        if resp['message'].startswith('Users added'): 
            await call.edit(self.strings('now_married').format(f"<a href='tg://user?id={uid}'>{args}</a>"))
        elif resp['message'].startswith('üö´ <b>API Error'):
            await call.edit(self.strings('api_error').format(resp['message']))
    
    async def no(self, call, args, uid):
        if call.from_user.id == self._tg_id:
            return await call.answer(self.strings('decide_for'))
        elif uid != call.from_user.id:
            return await call.answer(self.strings('marry_not_you'))
        await call.edit(self.strings('refused').format(f"<a href='tg://user?id={uid}'>{args}</a>", f"<a href='tg://user?id={self.me.id}'>{self.me.first_name}</a>"))

    async def yea(self, call, args, urluser):
        resp = (await self.mrg.delete_user(self.config['API-KEY']))
        if resp['message'].startswith('User data'):
            await call.edit(self.strings('filed_to_divorce').format(f"<a href='tg://user?id={urluser}'>{args}</a>"))
        elif resp['message'].startswith('üö´ <b>API Error'):
            await call.edit(self.strings('api_error').format(resp['message']))
    
    async def nothing(self, call):
        await call.edit(self.strings('not_dare'))

    async def dayscount(self, datedb, datenow):
        days = 0
        current_date = datedb.date()
        while current_date <= datenow:
            days += 1
            current_date += datetime.timedelta(days=1)
        return days - 1
    
    async def checkuser(self, m, args: str):
        try:
            if args:
                if args.isdigit():
                    return await self.client.get_entity(args[0])
                else:
                    args = args.split(' ', 1)[0].replace('@', '').lower()
                    return await self.client.get_entity(args[0])
            elif m.is_reply:
                return (await m.get_reply_message()).sender
            else:
                await utils.answer(m, self.strings('no_args').format(f"<code>{utils.escape_html(self.get_prefix())}wedlock @username</code>"))
        except ValueError:
            await utils.answer(m, self.strings('not_found'))

    @loader.command(ru_doc = " - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    async def wedlockcmd(self, message):
        """ - make a proposal"""
        args = utils.get_args_raw(message)
        user = await self.checkuser(message, args)
        if not (await self.mrg.user_exists(self.config['API-KEY'], self.me.id)):
            if not user.bot:
                if not (await self.mrg.user_exists(self.config['API-KEY'], user.id)):
                    if user.id != self.me.id:
                        await self.inline.form(
                            message = message,
                            text = self.strings('decided_marry').format(f"<a href='tg://user?id={user.id}'>{utils.escape_html(user.first_name)}</a>", f'<a href="tg://user?id={self.me.id}">{utils.escape_html(self.me.first_name)}</a>'),
                            reply_markup = self.choza(utils.escape_html(user.first_name), user.id), 
                            disable_security = True
                        )
                    else:
                        await utils.answer(message, self.strings('marry_yourself'))
                else:
                    await utils.answer(message, self.strings('idk'))
            else:
                await utils.answer(message, self.strings('marry_bot'))  
        else:
            urluser = (await self.mrg.get_user_info(self.config['API-KEY']))['users']
            urluser = urluser[next((key for key, value in urluser.items() if value != self.me.id), None)]
            user = await self.client.get_entity(urluser)
            await utils.answer(message, self.strings('cheat_on').format(f"<a href='{urluser}'>{user.first_name}</a>"))

    @loader.command(ru_doc = " - –ø–æ–¥–∞—Ç—å –Ω–∞ —Ä–∞–∑–≤–æ–¥")
    async def divorcecmd(self, message):
        """ - file to divorce"""
        if (await self.mrg.user_exists(self.config['API-KEY'], self.me.id)):
            urluser = (await self.mrg.get_user_info(self.config['API-KEY']))['users']
            urluser = urluser[next((key for key, value in urluser.items() if value != self.me.id), None)]
            user = await self.client.get_entity(urluser)
            await self.inline.form(
                message = message,
                text = self.strings('sure_divorce').format(f"<a href='tg://user?id={urluser}'>{user.first_name}</a>"),
                reply_markup = self.lenok(user.first_name, urluser)
            )
        else:
            await utils.answer(message, self.strings('no_soulmate'))
    
    @loader.command(ru_doc = " - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–∞–∫–µ")
    async def winfocmd(self, message):
        """ - marriage information"""
        if (await self.mrg.user_exists(self.config['API-KEY'], self.me.id)):
            datenow = datetime.date.today()
            dateinfo = (await self.mrg.get_user_info(self.config['API-KEY']))['date']
            datedb = datetime.datetime.strptime(F'{dateinfo["year"]}-{dateinfo["month"]}-{dateinfo["days"]}', '%Y-%m-%d')
            days = await self.dayscount(datedb, datenow)
            if (await self.mrg.user_exists(self.config['API-KEY'], self.me.id)):
                urluser = (await self.mrg.get_user_info(self.config['API-KEY']))['users']
                urluser = urluser[next((key for key, value in urluser.items() if value != self.me.id), None)]
                user = await self.client.get_entity(urluser)
                if self.config['BlockWedlock']:
                    await utils.answer(message, self.config['BlockWedlock'].format(yname=f"<a href='tg://user?id={urluser}'>{user.first_name}</a>", hname=f"<a href='tg://user?id={self.me.id}'>{self.me.first_name}</a>", day=datedb.day, month=datedb.strftime('%B'), year=datedb.year, days=days))
                else:
                    await utils.answer(message, self.strings('married').format(f"<a href='tg://user?id={urluser}'>{user.first_name}</a>", f"<a href='tg://user?id={self.me.id}'>{self.me.first_name}</a>", datedb.day, datedb.strftime('%B'), datedb.year, days))
        else:
            await utils.answer(message, self.strings('no_soulmate'))

    @loader.command(ru_doc = " - –õ–∏—Å—Ç –†–ü-–∫–æ–º–∞–Ω–¥ ")
    async def rplistcmd(self, message):
        ' - RP-Commands list'
        text = self.strings('rphelp')
        for key, value in self.strings('rplist').items():
            if re.search(r'^gift$|^–ø–æ–¥–∞—Ä–æ–∫$', key):
                text += f"{key} > {value.format('OneName', 'Gift', 'TwoName')}\n"
            else:
                text += f"{key} > {value.format('OneName', 'TwoName')}\n"
        await message.edit(text)
        
    @loader.watcher(only_messages = True)
    async def watcher(self, message):
        if message.text.lower() in self.strings('rplist').keys():
            mfi = message.from_id.user_id if isinstance(message.from_id, PeerUser) else message.from_id
            if (await self.mrg.user_exists(self.config['API-KEY'], self.me.id)) and mfi == self.tg_id:
                urluser = (await self.mrg.get_user_info(self.config['API-KEY']))['users']
                urluser = urluser[next((key for key, value in urluser.items() if value != self.me.id), None)]
                user = await self.client.get_entity(urluser)
                rplist_str = self.strings('rplist')[message.text.lower()]
                wtf = random.choice(self.strings('rplol'))
                if message.is_reply and (await message.get_reply_message()).sender.id == user.id:
                    if message.text.lower() in list(self.strings('rplist').keys()) and not re.search(r'^gift$|^–ø–æ–¥–∞—Ä–æ–∫$', message.text.lower()):
                        await utils.answer(message, rplist_str.format(f"<a href='tg://user?id={self.me.id}'>{self.me.first_name}</a>", f"<a href='tg://user?id={urluser}'>{user.first_name}</a>"))    
                    elif re.search(r'^gift$|^–ø–æ–¥–∞—Ä–æ–∫$', message.text.lower()):
                        await utils.answer(message, rplist_str.format(f"<a href='tg://user?id={self.me.id}'>{self.me.first_name}</a>", wtf, f"<a href='tg://user?id={urluser}'>{user.first_name}</a>"))
                elif message.is_reply and (await message.get_reply_message()).sender.id != user.id: 
                    await utils.answer(message, self.strings('love'))
                elif mfi == self.tg_id:
                    if message.text.lower() in list(self.strings('rplist').keys()) and not re.search(r'^gift$|^–ø–æ–¥–∞—Ä–æ–∫$', message.text.lower()):
                        await utils.answer(message, rplist_str.format(f"<a href='tg://user?id={self.me.id}'>{self.me.first_name}</a>", f"<a href='tg://user?id={urluser}'>{user.first_name}</a>"))
                    elif re.search(r'^gift$|^–ø–æ–¥–∞—Ä–æ–∫$', message.text.lower()):
                        await utils.answer(message, rplist_str.format(f"<a href='tg://user?id={self.me.id}'>{self.me.first_name}</a>", wtf, f"<a href='tg://user?id={urluser}'>{user.first_name}</a>"))
            elif mfi == self.tg_id:
                await utils.answer(message, self.strings('no_soulmate'))
